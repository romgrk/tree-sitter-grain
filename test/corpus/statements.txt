============================================
Imports
============================================

import defaultMember from "module-name"
import * from "module-name"
import { member } from "module-name"
import { member1 , member2 } from "module-name"
import { member1 , member2 as alias2 } from "module-name"
import defaultMember, { member1, member2 as alias2 } from "module-name"

----

(program
  (import_statement
    (import_clause (identifier)) (string))
  (import_statement
    (import_clause (namespace_import)) (string))
  (import_statement
    (import_clause (named_imports (import_specifier (identifier)))) (string))
  (import_statement
    (import_clause (named_imports
      (import_specifier (identifier))
      (import_specifier (identifier))))
    (string))
  (import_statement
    (import_clause (named_imports
      (import_specifier (identifier))
      (import_specifier (identifier) (identifier)))) (string))
  (import_statement
    (import_clause (identifier) (named_imports
      (import_specifier (identifier))
      (import_specifier (identifier) (identifier)))) (string))
)

============================================
Let expression (simple)
============================================

let x = true
let firstNumber = 3, secondNumber = 4
let mut y = 'c'
let rec mut fn = "string"

----

(program
  (let_expr (identifier) (true))
  (let_expr (identifier) (number)
            (identifier) (number))
  (let_expr (identifier) (char))
  (let_expr (identifier) (string))
)

============================================
Let expression (complex patterns)
============================================

let (name, age, _) = tuple
let { x, y: someName, z: _ } = record
let [one, two, _] = list
let [> one, two, _] = array
let Some(x) = option

----

(program
  (let_expr (tuple_pattern (identifier) (identifier) (underscore)) (identifier))
  (let_expr
    (record_pattern
      (identifier)
      (pattern_alias (identifier) (identifier))
      (pattern_alias (identifier) (underscore)))
    (identifier))
  (let_expr (list_pattern (identifier) (identifier) (underscore)) (identifier))
  (let_expr (array_pattern (identifier) (identifier) (underscore)) (identifier))
  (let_expr (construct_pattern (type) (identifier)) (identifier))
)
